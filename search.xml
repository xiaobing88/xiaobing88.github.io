<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Nginx网站HTTP转HTTPS]]></title>
    <url>%2F2018%2F11%2F25%2FNginx%E7%BD%91%E7%AB%99HTTP%E8%BD%ACHTTPS%2F</url>
    <content type="text"><![CDATA[申请SSL 验证配置 阿里云 添加DNS记录 域名配置自定义DNS地址 服务器Nginx，上传证书文件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104[root@host nginx]# cat nginx.conf# For more information on configuration, see:# * Official English Documentation: http://nginx.org/en/docs/# * Official Russian Documentation: http://nginx.org/ru/docs/user nginx;worker_processes auto;error_log /var/log/nginx/error.log;pid /run/nginx.pid;# Load dynamic modules. See /usr/share/nginx/README.dynamic.include /usr/share/nginx/modules/*.conf;events &#123; worker_connections 1024;&#125;http &#123; log_format main '$remote_addr - $remote_user [$time_local] "$request" ' '$status $body_bytes_sent "$http_referer" ' '"$http_user_agent" "$http_x_forwarded_for"'; access_log /var/log/nginx/access.log main; sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; include /etc/nginx/mime.types; default_type application/octet-stream; # Load modular configuration files from the /etc/nginx/conf.d directory. # See http://nginx.org/en/docs/ngx_core_module.html#include # for more information. include /etc/nginx/conf.d/*.conf; server &#123; listen 80 default_server; listen [::]:80 default_server; server_name _; root /usr/share/nginx/html; rewrite ^(.*)$ https://$host$1 permanent; # Load configuration files for the default server block. include /etc/nginx/default.d/*.conf; location / &#123; &#125; error_page 404 /404.html; location = /40x.html &#123; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; &#125; &#125; server &#123; # 监听 ssl 443 端口 listen 443 ssl; server_name risk2s.cf; # 开启 ssl ssl on; # 指定 ssl 证书路径 ssl_certificate /etc/nginx/https/full_chain.pem; # 指定私钥文件路径 ssl_certificate_key /etc/nginx/https/private.key; #添加HSTS的支持非常简单。 只需要在443的监听中，添加一行add_header。 其中，max-age=31536000，就是有效期一年 add_header Strict-Transport-Security "max-age=315360; includeSubDomains" always; &#125;# Settings for a TLS enabled server.## server &#123;# listen 443 ssl http2 default_server;# listen [::]:443 ssl http2 default_server;# server_name _;# root /usr/share/nginx/html;## ssl_certificate "/etc/pki/nginx/server.crt";# ssl_certificate_key "/etc/pki/nginx/private/server.key";# ssl_session_cache shared:SSL:1m;# ssl_session_timeout 10m;# ssl_ciphers HIGH:!aNULL:!MD5;# ssl_prefer_server_ciphers on;## # Load configuration files for the default server block.# include /etc/nginx/default.d/*.conf;## location / &#123;# &#125;## error_page 404 /404.html;# location = /40x.html &#123;# &#125;## error_page 500 502 503 504 /50x.html;# location = /50x.html &#123;# &#125;# &#125;&#125; 配置文件关键位置]]></content>
      <categories>
        <category>编程</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[GitPage之Hexo环境]]></title>
    <url>%2F2018%2F11%2F25%2FGitPage%E4%B9%8BHexo%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[Hexo环境搭建Git安装Git 配置Git Node.js Hexo的安装使用 npm 即可完成 Hexo 的安装： npm install -g hexo-cli 常用命令hexo 基本使用命令生成静态文件：hexo g 新建一篇文章：hexo new [layout] &lt;title&gt; 启动服务器：hexo server 部署网站：hexo d 清除缓存文件：hexo clean 列出网站资料:hexo list &lt;type&gt; Hexo生成完毕后自动部署网站：hexo d-g ##参考资料文档| Hexo]]></content>
      <categories>
        <category>编程</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[教务处引起的验证码识别的机器学习-Python版本]]></title>
    <url>%2F2018%2F01%2F27%2F%E6%95%99%E5%8A%A1%E5%A4%84%E5%BC%95%E8%B5%B7%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-Python%E7%89%88%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[前言验证码识别涉及很多方面的内容。入手难度大,但是入手后,可拓展性又非常广泛,可玩性极强,成就感也很足。 验证码内的字符识别主要以机器学习的分类算法来完成,目前我所利用的字符识别的算法为KNN(K邻近算法)和SVM (支持向量机算法) 本文使用SVM，适合初学者，简单易懂，效果显著 准备工具 Python3.6 libsvm （svm机器学习库） PIL （图像处理库） 大致流程 抓取原始图片素材（验证码图片） 原始图片处理 （灰度化） 图片切割 （图片切割成单个字符的小图片） 图片尺寸归一化 （小图片变为同种格式） 图片字符标记 （人工分类小图片，并打标） 图片特征提取 得到特定格式的特征训练集 通过模型实现图片验证码 准备工作下载 Libsvm下载 https://www.csie.ntu.edu.tw/~cjlin/libsvm/oldfiles/将libsvm包放入C:\Python36\Lib\site-packages目录下如果svmutil.py, line 5 报错将其5、6 行的from svm import 改为from .svm import PIL numpy os sys requests bs4(beautifulsoup4) pytesser3 pytesser3 OCR in Python using the Tesseract engine from Google。是谷歌OCR开源项目的一个模块，可将图片中的文字转换成文本（主要是英文）。 在这里，pytesser,我觉得识别效果一般，所以我就没使用。 批量抓取验证码图片通过在某网站登录处获取验证码1234567891011121314151617181920212223# 验证码下载def get_pic(s ,pic_name): global codeurl path = 'images' isExists=os.path.exists(path) if isExists != True: os.makedirs(path) print('文件夹'+path+' 创建成功') else: pass # 得到验证码图片 rcode = s.get(codeurl) f = open('./images/&#123;&#125;.png'.format(pic_name), 'wb') f.write(rcode.content) f.close() print(pic_name,"\t图片写入成功！")# 利用session 保持同步s = requests.Session()# 图片数量end_num = 100for i in range(0,end_num): pic_name = 'pic_'+str(i) get_pic(s, pic_name) 图像处理图片处理，是为了减少后面训练时的复杂。 图片二值化 将RGB彩图转为灰度图 将灰度图按照设定阈值转化为二值图12345678910111213def get_bin_table(threshold=140): """ 获取灰度转二值的映射table :param threshold: :return:table """ table = [] for i in range(256): if i &lt; threshold: table.append(0) else: table.append(1) return table 这里阈值需要自己通过图片对比来自行调整，感觉最合适的值即可，我设的是200. 图片切割将验证码图片 切割成 只包含单个字符的图片 使用图像编辑软件（Photoshop）打开验证码图片，放大到像素级别，观察其它一些参数特点仔细观察，可以看到一格一格的像素点。这里统一将图片(5218)切割成818格式的小图片12345678910111213141516171819def get_crop_imgs(img): """ 按照图片的特点,进行切割,这个要根据具体的验证码来进行工作. :param img :return:child_img_list """ child_img_list = [] for i in range(4): x = 2 + i * (8 + 5) # 见原理图 y = 0 child_img = img.crop((x, y, x + 8, y + 18)) child_img_list.append(child_img) return child_img_list # 分割图片 images = get_crop_imgs(out) for i in images: o = i.resize((8, 18)) o.save('./tmp/'+str(n)+'.png','PNG') n += 1 尺寸归一化将数据集整合为统一格式的状态文件 resize((8, 18)) 模型训练基本步骤： 准备图片素材 人工对图片打上标签 得到图片识别特征 模型训练 素材准备剔除单个字符小图片其中一个难以辨认的图片。 人工打标这一个是工作量最大，也是最无聊的阶段，就是将众多单个字符小图片放入0-9这10个文件夹中。但这一部也是最简单的，靠眼睛认即可。例如4文件夹 特征提取字符图片 宽8个像素，高18个像素,经过降维之后可以得到18维的一组特征。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071#获取指定图片的特征值def get_feature(img): """ 获取指定图片的特征值, 1. 按照每排的像素点,高度为18,则有18个维度,然后为8列,总共144个维度 :param img_path: :return:一个维度为18（高度）的列表 """ width, height = img.size pixel_cnt_list = [] height = 10 for y in range(height): pix_cnt_x = 0 for x in range(width): # == 0 如果按照示例程序无法提取特征值，如果没有出现，就看看当前像素点的值进行自我处理。 if img.getpixel((x, y)) &lt; 240: # 黑色点 pix_cnt_x += 1 pixel_cnt_list.append(pix_cnt_x) for x in range(width): pix_cnt_y = 0 for y in range(height): if img.getpixel((x, y)) &lt; 240: # 黑色点 pix_cnt_y += 1 pixel_cnt_list.append(pix_cnt_y) return pixel_cnt_list# 得到特征值文件def get_fea_file(img_path,n,flag_print): # 遍历图片文件 for i in os.walk(img_path + '/' + str(n)): im_list = i[2] for im_file in im_list: im_name = './' + img_path + '/' + str(n) + '/' + im_file # print(im_name) im = Image.open(im_name) # 特征选择 im_feature = get_feature(im) # print(im_feature) z_index = 1 if os.path.exists(str(n) + '_feature.txt'): ctreate_file = False else: ctreate_file = True # f = open(str(n) + '_feature.txt', 'a') # f = open(str(n) + '_feature.txt', 'a') #单个特征值文件 f = open('feature.txt', 'a') if ctreate_file: if flag_print: for z in im_feature: if z_index == 1: print(n, end=' ') f.write(str(n) + ' ') print(str(z_index) + ':' + str(z), end=' ') f.write(str(z_index) + ':' + str(z) + ' ') z_index += 1 print('') f.write('\n') else: for z in im_feature: if z_index == 1: f.write(str(n) + ' ') f.write(str(z_index) + ':' + str(z) + ' ') z_index += 1 f.write('\n') f.close() 将图片素材特征化，按照 libSVM 指定的格式生成一组带特征值和标记值的向量文件。 内容举例如下： 此文件格式、如何使用-参考： https://www.csie.ntu.edu.tw/~cjlin/libsvm/ https://www.cnblogs.com/-ldzwzj-1991/p/5893054.html https://www.cnblogs.com/-ldzwzj-1991/p/5897199.html http://www.cnblogs.com/Finley/p/5329417.html 模型训练这里就是如何使用libsvm的过程，12345678910111213def train_model_main2(): # LibSVM # 按照 libSVM 指定的格式生成一组带特征值和标记值的向量文件 svm_path = r"C:\Python36\risk_down\libsvm" sys.path.append(svm_path + r"\python") import svmutil # y, x = svmutil.svm_read_problem('./' + str(n) + '_feature.txt') y, x = svmutil.svm_read_problem('./' + 'feature.txt') model = svmutil.svm_train(y[:50], x[:50], '-c 4') model_path = "num_feature.model" svmutil.svm_save_model(model_path, model) # p_label,p_acc,p_val = svmutil.svm_predict(y[0:], x[0:],model) # print(p_label,p_acc,p_val) 模型测试使用训练集之外的图片作为测试集，得到其特征值，通过模型进行比对。123456789101112131415161718#train.txt是所有训练集的特征值文件，test.txt是所有测试集的特征值文件。def main(): y, x = svm_read_problem('train.txt') yt, xt = svm_read_problem('test.txt') # 训练模型过程中，参数含义 """ iter 为迭代次数， nu 与前面的操作参数 -n nu 相同， obj 为 SVM 文件转换为的二次规划求解得到的最小值， rho 为判决函数的常数项 b ， nSV 为支持向量个数， nBSV 为边界上的支持向量个数， Total nSV 为支持向量总个数 """ model = svm_train(y, x) print('测试结果:',end='\t') p_label, p_acc, p_val = svm_predict(yt, xt, model) print(p_label) 测试结果：12测试结果:Accuracy = 85.7143% (17/21) (classification)[8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 9.0, 9.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 9.0, 8.0, 8.0, 8.0, 8.0] 完整代码及数据GitHub：xiaobing88https://github.com/xiaobing88/OCR_by_MI 免责声明 本文只做了该网站对外公开的公共图片资源进行了爬取， 并未越权 做任何多余操作。 本文的主要目的也仅是用于 OCR交流学习 和引起大家对 验证安全的警觉 。 本文研究所用素材来自于某Web网站 完全对外公开 的公共图片资源。 本文未做任何破坏性操作，如有需要 ，本文可以积极删除。 参考资料 字符型图片验证码识别完整过程及Python实现https://www.cnblogs.com/beer/p/5672678.html LibSVM学习详细说明https://www.cnblogs.com/-ldzwzj-1991/p/5897199.html]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows cmd下连接网络]]></title>
    <url>%2F2018%2F01%2F27%2Fwindows-cmd%E4%B8%8B%E8%BF%9E%E6%8E%A5%E7%BD%91%E7%BB%9C%2F</url>
    <content type="text"><![CDATA[cmd下命令行拨号rasdial 网络连接名称 宽带连接账号 宽带连接密码 1rasdial 徐徐徐F 2***9***1@s***u 19*****70 cmd下命令行开启WIFI热点netsh wlan set hostednetwork mode=allow ssid=热点名称 key=热点密码 启动热点 netsh wlan start hostednetwork 12netsh wlan set hostednetwork mode=allow ssid=risk key=risk2snetsh wlan start hostednetwork]]></content>
  </entry>
  <entry>
    <title><![CDATA[Python图片处理模块skimage]]></title>
    <url>%2F2018%2F01%2F25%2FPython%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86%E6%A8%A1%E5%9D%97skimage%2F</url>
    <content type="text"><![CDATA[安装skimage模块1pip install scikit-image 方法函数123&gt;&gt;&gt; import skimage&gt;&gt;&gt; dir(skimage)['_INPLACE_MSG', '_STANDARD_MSG', '__SKIMAGE_SETUP__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__', '__version__', '__warningregistry__', '_raise_build_error', '_shared', '_test', 'data_dir', 'doctest', 'doctest_verbose', 'dtype_limits', 'img_as_bool', 'img_as_float', 'img_as_int', 'img_as_ubyte', 'img_as_uint', 'pkg_dir', 'test', 'test_verbose', 'util'] 用法-帮助123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105&gt;&gt;&gt; help(skimage)Help on package skimage:NAME skimage - Image Processing SciKit (Toolbox for SciPy)DESCRIPTION ``scikit-image`` (a.k.a. ``skimage``) is a collection of algorithms for image processing and computer vision. The main package of ``skimage`` only provides a few utilities for converting between image data types; for most features, you need to import one of the following subpackages: Subpackages ----------- color Color space conversion. data Test images and example data. draw Drawing primitives (lines, text, etc.) that operate on NumPy arrays. exposure Image intensity adjustment, e.g., histogram equalization, etc. feature Feature detection and extraction, e.g., texture analysis corners, etc. filters Sharpening, edge finding, rank filters, thresholding, etc. graph Graph-theoretic operations, e.g., shortest paths. io Reading, saving, and displaying images and video. measure Measurement of image properties, e.g., similarity and contours. morphology Morphological operations, e.g., opening or skeletonization. novice Simplified interface for teaching purposes. restoration Restoration algorithms, e.g., deconvolution algorithms, denoising, etc. segmentation Partitioning an image into multiple regions. transform Geometric and other transforms, e.g., rotation or the Radon transform. util Generic utilities. viewer A simple graphical user interface for visualizing results and exploring parameters. Utility Functions ----------------- img_as_float Convert an image to floating point format, with values in [0, 1]. img_as_uint Convert an image to unsigned integer format, with values in [0, 65535]. img_as_int Convert an image to signed integer format, with values in [-32768, 32767]. img_as_ubyte Convert an image to unsigned byte format, with values in [0, 255].PACKAGE CONTENTS _build _shared (package) color (package) data (package) draw (package) exposure (package) external (package) feature (package) filters (package) future (package) graph (package) io (package) measure (package) morphology (package) novice (package) restoration (package) run-hessian scripts (package) segmentation (package) setup transform (package) util (package) viewer (package)FUNCTIONS test = _test(doctest=False, verbose=False) This would run all unit tests, but nose couldn't be imported so the test suite can not run.DATA __SKIMAGE_SETUP__ = False __warningregistry__ = &#123;'version': 0, ("the imp module is deprecated in... data_dir = r'C:\Python36\lib\site-packages\skimage\data' doctest = functools.partial(&lt;function _test at 0x000001912DC78598&gt;, do... doctest_verbose = functools.partial(&lt;function _test at 0x000001912DC78... pkg_dir = r'C:\Python36\lib\site-packages\skimage' test_verbose = functools.partial(&lt;function _test at 0x000001912DC78598...VERSION 0.13.1FILE c:\python36\lib\site-packages\skimage\__init__.py 示例123#求图片均值imgs = skimage.io.imread(file_name)ttt = np.mean(imgs)]]></content>
  </entry>
  <entry>
    <title><![CDATA[git提交LF will be replaced by CRLF 错误]]></title>
    <url>%2F2018%2F01%2F23%2Fgit%E6%8F%90%E4%BA%A4LF-will-be-replaced-by-CRLF-%E9%94%99%E8%AF%AF%2F</url>
    <content type="text"><![CDATA[当我使用hexo d -g时出现错误，12warning: LF will be replaced by CRLF in tags/index.html.The file will have its original line endings in your working directory. 接下来四步即可： git config core.autocrlf truegit config –global core.autocrlf truegit config –global core.autocrlf inputgit config –global core.autocrlf false]]></content>
      <categories>
        <category>电脑故障</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python的工作路径问题]]></title>
    <url>%2F2018%2F01%2F23%2FPython%E7%9A%84%E5%B7%A5%E4%BD%9C%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[python文件路径谨慎使用中文路径。Windows下路径使用反斜杠\，python中反斜杠\有转义功能。 路径使用斜杠/ 转义反斜杠\ 原始字符串raw string r”……” python 绝对路径、相对路径绝对路径 os.path.abspath(“文件名”)相对路径 os.path.dirname(“文件名”) python 在不同层级目录import 模块 sys.path添加import目录 导入模块关键是能够根据sys.path环境变量的 Django的搜索路径与Import机制 Python 中，每个 py 文件被称之为模块，每个具有 init.py 文件的目录被称为包。只要模块或者包所在的目录在 sys.path 中，就可以使用 import 模块或 import 包来使用。]]></content>
      <categories>
        <category>电脑故障</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows包管理工具Chocolatey]]></title>
    <url>%2F2018%2F01%2F13%2FWindows%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Chocolatey%2F</url>
    <content type="text"><![CDATA[相当于Ubuntu下的apt-get、Centos下的yum https://chocolatey.org/packages 使用命令行得到choco的使用帮助。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165λ choco /?This is a listing of all of the different things you can pass to choco.Commands * list - lists remote or local packages * search - searches remote or local packages (alias for list) * info - retrieves package information. Shorthand for choco search pkgname --exact --verbose * install - installs packages from various sources * pin - suppress upgrades for a package * outdated - retrieves packages that are outdated. Similar to upgrade all --noop * upgrade - upgrades packages from various sources * uninstall - uninstalls a package * pack - packages up a nuspec to a compiled nupkg * push - pushes a compiled nupkg * new - generates files necessary for a chocolatey package from a template * source - view and configure default sources * sources - view and configure default sources (alias for source) * config - Retrieve and configure config file settings * feature - view and configure choco features * features - view and configure choco features (alias for feature) * apikey - retrieves or saves an apikey for a particular source * setapikey - retrieves or saves an apikey for a particular source (alias for apikey) * unpackself - have chocolatey set itself up * version - [DEPRECATED] will be removed in v1 - use `choco outdated` or `cup &lt;pkg|all&gt; -whatif` instead * update - [DEPRECATED] RESERVED for future use (you are looking for upgrade, these are not the droids you are looking for)Please run chocolatey with `choco command -help` for specific help on each command.How To Pass Options / SwitchesYou can pass options and switches in the following ways: * Unless stated otherwise, an option/switch should only be passed one time. Otherwise you may find weird/non-supported behavior. * `-`, `/`, or `--` (one character switches should not use `--`) * **Option Bundling / Bundled Options**: One character switches can be bundled. e.g. `-d` (debug), `-f` (force), `-v` (verbose), and `-y` (confirm yes) can be bundled as `-dfvy`. * NOTE: If `debug` or `verbose` are bundled with local options (not the global ones above), some logging may not show up until after the local options are parsed. * **Use Equals**: You can also include or not include an equals sign `=` between options and values. * **Quote Values**: When you need to quote an entire argument, such as when using spaces, please use a combination of double quotes and apostrophes (`"'value'"`). In cmd.exe you can just use double quotes (`"value"`) but in powershell.exe you should use backticks (`` `"value`" ``) or apostrophes (`'value'`). Using the combination allows for both shells to work without issue, except for when the next section applies. * **Periods in PowerShell**: If you need to pass a period as part of a value or a path, PowerShell doesn't always handle it well. Please quote those values using "Quote Values" section above. * **Pass quotes in arguments**: When you need to pass quoted values to to something like a native installer, you are in for a world of fun. In cmd.exe you must pass it like this: `-ia "/yo=""Spaces spaces"""`. In PowerShell.exe, you must pass it like this: `-ia '/yo=""Spaces spaces""'`. No other combination will work. In PowerShell.exe if you are on version v3+, you can try `--%` before `-ia` to just pass the args through as is, which means it should not require any special workarounds. * Options and switches apply to all items passed, so if you are installing multiple packages, and you use `--version=1.0.0`, choco is going to look for and try to install version 1.0.0 of every package passed. So please split out multiple package calls when wanting to pass specific options.Default Options and Switches -?, --help, -h Prints out the help menu. -d, --debug Debug - Show debug messaging. -v, --verbose Verbose - Show verbose messaging. Very verbose messaging, avoid using under normal circumstances. --trace Trace - Show trace messaging. Very, very verbose trace messaging. Avoid except when needing super low-level .NET Framework debugging. Available in 0.10.4+. --acceptlicense, --accept-license AcceptLicense - Accept license dialogs automatically. Reserved for future use. -y, --yes, --confirm Confirm all prompts - Chooses affirmative answer instead of prompting. Implies --accept-license -f, --force Force - force the behavior. Do not use force during normal operation - it subverts some of the smart behavior for commands. --noop, --whatif, --what-if NoOp / WhatIf - Don't actually do anything. -r, --limitoutput, --limit-output LimitOutput - Limit the output to essential information --timeout, --execution-timeout=VALUE CommandExecutionTimeout (in seconds) - The time to allow a command to finish before timing out. Overrides the default execution timeout in the configuration of 2700 seconds. '0' for infinite starting in 0.10.4. -c, --cache, --cachelocation, --cache-location=VALUE CacheLocation - Location for download cache, defaults to %TEMP% or value in chocolatey.config file. --allowunofficial, --allow-unofficial, --allowunofficialbuild, --allow-unofficial-build AllowUnofficialBuild - When not using the official build you must set this flag for choco to continue. --failstderr, --failonstderr, --fail-on-stderr, --fail-on-standard-error, --fail-on-error-output FailOnStandardError - Fail on standard error output (stderr), typically received when running external commands during install providers. This overrides the feature failOnStandardError. --use-system-powershell UseSystemPowerShell - Execute PowerShell using an external process instead of the built-in PowerShell host. Should only be used when internal host is failing. Available in 0.9.10+. --no-progress Do Not Show Progress - Do not show download progress percentages. Available in 0.10.4+. --proxy=VALUE Proxy Location - Explicit proxy location. Overrides the default proxy location of ''. Available for config settings in 0.9.9.9+, this CLI option available in 0.10.4+. --proxy-user=VALUE Proxy User Name - Explicit proxy user (optional). Requires explicity proxy (`--proxy` or config setting). Overrides the default proxy user of ''. Available for config settings in 0.9.9.9+, this CLI option available in 0.10.4+. --proxy-password=VALUE Proxy Password - Explicit proxy password (optional) to be used with username. Requires explicity proxy (`--proxy` or config setting) and user name. Overrides the default proxy password (encrypted in settings if set). Available for config settings in 0.9.9.9+, this CLI option available in 0.10.4+. --proxy-bypass-list=VALUE ProxyBypassList - Comma separated list of regex locations to bypass on proxy. Requires explicity proxy (`--proxy` or config setting). Overrides the default proxy bypass list of ''. Available in 0.10.4+. --proxy-bypass-on-local Proxy Bypass On Local - Bypass proxy for local connections. Requires explicity proxy (`--proxy` or config setting). Overrides the default proxy bypass on local setting of 'True'. Available in 0.10.4+. --log-file=VALUE Log File to output to in addition to regular loggers. Available in 0.1- 0.8+.Chocolatey v0.10.8]]></content>
  </entry>
  <entry>
    <title><![CDATA[python的isinstance方法]]></title>
    <url>%2F2018%2F01%2F12%2Fpython%E7%9A%84isinstance%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Python的isinstance方法 主要是判断参数的类型是否为正确 12&gt;&gt;&gt; dir(isinstance)['__call__', '__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__name__', '__ne__', '__new__', '__qualname__', '__reduce__', '__reduce_ex__', '__repr__', '__self__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__text_signature__'] 123456789&gt;&gt;&gt; help(isinstance)Help on built-in function isinstance in module builtins:isinstance(obj, class_or_tuple, /) Return whether an object is an instance of a class or of a subclass thereof. A tuple, as in ``isinstance(x, (A, B, ...))``, may be given as the target to check against. This is equivalent to ``isinstance(x, A) or isinstance(x, B) or ...`` etc. isinstance 用法12345&gt;&gt;&gt; isinstance(1, int)True&gt;&gt;&gt; isinstance("risk2s", str)True&gt;&gt;&gt;]]></content>
      <categories>
        <category>编程技术</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Windows10无法使用系统的调节亮度功能]]></title>
    <url>%2F2018%2F01%2F10%2FWindows10%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%B0%83%E8%8A%82%E4%BA%AE%E5%BA%A6%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[##Windows10无法调节亮度 查看电脑是否安装teamviewer等监控软件。 卸载它自带的驱动 方法如下 在菜单栏里选择 其他 &gt; 选项 &gt; 高级 &gt; “高级网络设置” &gt; “卸载…” 即可 卸载它的监控驱动吧。 ##感激https://www.zhihu.com/question/33767047]]></content>
      <categories>
        <category>电脑故障</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS7安装Python3.6]]></title>
    <url>%2F2018%2F01%2F10%2FCentOS7%E5%AE%89%E8%A3%85Python3-6%2F</url>
    <content type="text"><![CDATA[安装python3.6可能使用的依赖1yum install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel gcc 下载python3.6编译安装到python官网下载https://www.python.org下载最新版源码，使用make altinstall，如果使用make install，在系统中将会有两个不同版本的Python在/usr/bin/目录中。这将会导致很多问题，而且不好处理。1wget https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tgz 1tar -xzvf Python-3.6.0.tgz -C /tmp 1cd /tmp/Python-3.6.0/ 把Python3.6安装到 /usr/local 目录1./configure --prefix=/usr/local 1make 1make altinstall python3.6程序的执行文件：/usr/local/bin/python3.6python3.6应用程序目录：/usr/local/lib/python3.6pip3的执行文件：/usr/local/bin/pip3.6pyenv3的执行文件：/usr/local/bin/pyenv-3.6 更改/usr/bin/python链接1cd/usr/bin 1mv python python.backup 1ln -s /usr/local/bin/python3.6 /usr/bin/python 1ln -s /usr/local/bin/python3.6 /usr/bin/python3 更改yum脚本的python依赖1cd /usr/bin 1ls yum* 1yum yum-config-manager yum-debug-restore yum-groups-manager 1yum-builddep yum-debug-dump yumdownloader 更改以上文件头为1#!/usr/bin/python 改为 #!/usr/bin/python2 修改gnome-tweak-tool配置文件12# vi /usr/bin/gnome-tweak-tool#!/usr/bin/python 改为 #!/usr/bin/python2 修改urlgrabber配置文件1# vi /usr/libexec/urlgrabber-ext-down 1#!/usr/bin/python 改为 #!/usr/bin/python2]]></content>
      <categories>
        <category>编程技术</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[我的博客世界开始]]></title>
    <url>%2F2017%2F12%2F27%2F%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C%E5%BC%80%E5%A7%8B%2F</url>
    <content type="text"><![CDATA[我的blog欢迎你的到来！ 搭建1我想的是慢慢弄，做一个积累。]]></content>
      <categories>
        <category>生活随记</category>
      </categories>
      <tags>
        <tag>起始</tag>
      </tags>
  </entry>
</search>
